Exercise 1:
Node* rotateRight(Node* root) {
    //TODO: Rotate and return new root after rotate
    if (!root || !root -> pLeft)
        return root;
    Node *newRoot = root-> pLeft;
        root->pLeft = newRoot->pRight;
        newRoot->pRight = root;

        // Update heights
        root->balance = EH;
        newRoot->balance = EH;

        return newRoot;
}

Node* rotateLeft(Node* root) {
    //TODO: Rotate and return new root after rotate
    if (!root || !root->pRight)
            return root;

        Node *newRoot = root->pRight;
        root->pRight = newRoot->pLeft;
        newRoot->pLeft = root;

        // Update heights
        root->balance = EH;
        newRoot->balance = EH;

        return newRoot;
}
Exercise 2:
Node* rotateRight(Node* root) {
    //TODO: Rotate and return new root after rotate
    if (!root || !root -> pLeft)
        return root;
    Node *newRoot = root-> pLeft;
        root->pLeft = newRoot->pRight;
        newRoot->pRight = root;

        // Update heights
        root->balance = EH;
        newRoot->balance = EH;

        return newRoot;
}

Node* rotateLeft(Node* root) {
    //TODO: Rotate and return new root after rotate
    if (!root || !root->pRight)
            return root;

        Node *newRoot = root->pRight;
        root->pRight = newRoot->pLeft;
        newRoot->pLeft = root;

        // Update heights
        root->balance = EH;
        newRoot->balance = EH;

        return newRoot;
}
Exerise 3:
//Helping functions
Node* deleteRightBalance(Node* &root, bool &shorter)
{
    if (root->balance == LH)
    {
        root -> balance = EH;
    }
    else if (root->balance == EH)
    {
        root->balance = RH;
        shorter = false;
    }
    else 
    {
        Node* rightTree = root->pRight;
        if (rightTree->balance == LH)
        {
            Node* leftTree = rightTree->pLeft;
            if (leftTree -> balance == LH)
            {
                rightTree->balance = RH;
                root->balance = EH;
            }
            else if (leftTree->balance == EH)
            {
                root->balance = LH;
                rightTree -> balance = EH;
            }
            else 
            {
                root->balance = LH;
                rightTree -> balance = EH;
            }
            leftTree -> balance = EH;
            root -> pRight = rotateRight(rightTree);
            root = rotateLeft(root);
        }
        else 
        {
            if (rightTree->balance != EH)
            {
                root->balance = EH;
                rightTree->balance = EH;
            }
            else 
            {
                root -> balance = RH;
                rightTree->balance = LH;
                shorter = false;
            }
            root = rotateLeft(root);
        }
    }
    return root;
}
Node* deleteLeftBalance(Node* &root, bool &shorter)
{
    if (root->balance == RH) root->balance = EH;
    else if (root->balance == EH)
    {
        root -> balance = LH;
        shorter = false;
    }
    else 
    {
        Node* leftTree = root->pLeft;
        if (leftTree -> balance == RH)
        {
            Node* rightTree = leftTree -> pRight;
            if (rightTree -> balance == RH)
            {
                leftTree->balance = LH;
                root->balance = EH;
            }
            else if (rightTree -> balance == EH)
            {
                root->balance = RH;
                leftTree->balance = EH;
            }
            else 
            {
                root->balance = RH;
                leftTree->balance = EH;
            }
            rightTree -> balance = EH;
            root->pLeft = rotateLeft(leftTree);
            root = rotateRight(root);
        }
        else 
        {
            if (leftTree -> balance != EH)
            {
                root->balance = EH;
                leftTree -> balance = EH;
            }
            else 
            {
                root->balance = LH;
                leftTree -> balance = RH;
                shorter = false;
            }
            root = rotateRight(root);
        }
    }
    return root;
}
Node* AVLDelete(Node* &root, T value, bool &shorter, bool &success)
{
    if (!root)
    {
        shorter = false;
        success = false;
        return nullptr;
    }
    if (value < root -> data)
    {
        root -> pLeft = AVLDelete(root->pLeft, value, shorter, success);
        if (shorter) root = deleteRightBalance(root, shorter);
    }
    else if (value > root->data)
    {
        root->pRight = AVLDelete(root->pRight, value, shorter, success);
        if (shorter) root = deleteLeftBalance(root, shorter);
    }
    else 
    {
        Node* deleteNode = root;
        if (!root -> pRight)
        {
            Node* newRoot = root->pLeft;
            success = true;
            shorter = true;
            delete deleteNode;
            return newRoot;
        }
        else if (!root->pLeft)
        {
            Node* newRoot = root->pRight;
            success = true;
            shorter = true;
            delete deleteNode;
            return newRoot;
        }
        else 
        {
            Node* exchPtr = root->pLeft;
            while(exchPtr->pRight)
            {
                exchPtr = exchPtr -> pRight;
            }
            root -> data = exchPtr->data;
            root->pLeft = AVLDelete(root->pLeft, exchPtr->data, shorter, success);
            if (shorter) root = deleteRightBalance(root,shorter);
        }
    }
    return root;
}
void remove(const T &value){
    //TODO
    T val = value;
    bool shorter = false;
    bool success = false;
    this->root = AVLDelete(this->root, val, shorter, success);
    
}
Exercise 4:
void inOrderRec(Node* root)
{
    if (!root) return;
    
    inOrderRec(root->pLeft);
    cout << root->data << " ";
    inOrderRec(root->pRight);
}
void printInorder(){
        //TODO
        inOrderRec(this->root);
    }
    void inOrderRecBool(Node* root, T value, bool &found)
    {
    if (root)
    {
        if (root->data == value)
        {
            found = true;
            return;
        }
        inOrderRecBool(root->pLeft, value, found);
        inOrderRecBool(root->pRight, value, found);
    }
    return;
    }
  bool search(const T &value){
        //TODO
        bool found = false;
        inOrderRecBool(this->root, value, found);
        return found;
    }

